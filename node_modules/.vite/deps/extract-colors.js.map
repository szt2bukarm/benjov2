{
  "version": 3,
  "sources": ["../../extract-colors/src/color/Color.ts", "../../extract-colors/src/sort/AverageGroup.ts", "../../extract-colors/src/sort/AverageManager.ts", "../../extract-colors/src/sort/sortColors.ts", "../../extract-colors/src/color/FinalColor.ts", "../../extract-colors/src/extract/cleanInputs.ts", "../../extract-colors/src/color/LeafGroup.ts", "../../extract-colors/src/color/RootGroup.ts", "../../extract-colors/src/extract/extractor.ts", "../../extract-colors/src/extractColors.ts"],
  "sourcesContent": ["/**\n * Informations like saturation or count of pixels in image.\n * \n * @class\n * @classdesc Calculate some informations and store data about color.\n */\nexport default class Color {\n  \n  _red: number\n  _green: number\n  _blue: number\n  _hex: number\n  _count = 1\n\n  private __saturation = -1\n  private __hue = -1\n  private __lightness = -1\n  private __intensity = -1\n\n  /**\n   * Set red, green and blue colors to create the Color object.\n   */\n  constructor (red: number, green: number, blue: number, hex = red << 16 | green << 8 | blue) {\n    this._red = red\n    this._green = green\n    this._blue = blue\n    this._hex = hex\n  }\n\n  /**\n   * Distance between two colors.\n   * - Minimum is 0 (between two same colors)\n   * - Maximum is 1 (for example between black and white)\n   */\n  static distance (colorA: Color, colorB: Color) {\n    return (Math.abs(colorB._red - colorA._red) + Math.abs(colorB._green - colorA._green) + Math.abs(colorB._blue - colorA._blue)) / (3 * 0xFF)\n  }\n\n  clone() {\n    const color = new Color(this._red, this._green, this._blue, this._hex)\n    color._count = this._count\n    return color\n  }\n\n  updateHSL () {\n    const red = this._red / 255\n    const green = this._green / 255\n    const blue = this._blue / 255\n\n    const max = Math.max(red, green, blue)\n    const min = Math.min(red, green, blue)\n\n    this.__lightness = (max + min) / 2\n\n    // achromatic\n    if (max === min) {\n      this.__hue = 0\n      this.__saturation = 0\n      this.__intensity = 0\n    } else {\n      const distance = max - min;\n      \n      this.__saturation = this.__lightness > 0.5 ? distance / (2 - max - min) : distance / (max + min)\n      this.__intensity = this.__saturation * ((0.5 - Math.abs(0.5 - this.__lightness)) * 2)\n      switch (max) {\n        case red:\n          this.__hue = ((green - blue) / distance + (green < blue ? 6 : 0)) / 6\n          break;\n        case green:\n          this.__hue = ((blue - red) / distance + 2) / 6\n          break;\n        case blue:\n          this.__hue = ((red - green) / distance + 4) / 6\n          break;\n      }\n    }\n  }\n\n  /**\n   * Hue from 0 to 1\n   */\n  get _hue () {\n    if (this.__hue === -1) {\n      this.updateHSL()\n    }\n    return this.__hue\n  }\n\n  /**\n   * Saturation from 0 to 1\n   */\n  get _saturation () {\n    if (this.__saturation === -1) {\n      this.updateHSL()\n    }\n    return this.__saturation\n  }\n\n  /**\n   * Lightness from 0 to 1\n   */\n  get _lightness () {\n    if (this.__lightness === -1) {\n      this.updateHSL()\n    }\n    return this.__lightness\n  }\n  \n  /**\n   * Color intensity from 0 to 1\n   */\n  get _intensity () {\n    if (this.__intensity === -1) {\n      this.updateHSL()\n    }\n    return this.__intensity\n  }\n}\n", "import Color from \"../color/Color\";\n\nconst distance = (a: number, b: number) => Math.abs(a - b)\nconst hueDistance = (a: number, b: number) =>\n  Math.min(distance(a, b), distance((a + 0.5) % 1, (b + 0.5) % 1))\n\nexport class AverageGroup {\n  colors: Color[] = []\n  private _average: Color | null = null\n\n  addColor(color: Color) {\n    this.colors.push(color)\n    this._average = null\n  }\n\n  isSamePalette(color: Color, hue: number, saturation: number, lightness: number) {\n    for (let i = 0; i < this.colors.length; i++) {\n      const currentColor = this.colors[i]\n      const isSame = \n        hueDistance(currentColor._hue, color._hue) < hue &&\n        distance(currentColor._saturation, color._saturation) < saturation &&\n        distance(currentColor._lightness, color._lightness) < lightness\n\n      if (!isSame) {\n        return false\n      }\n    }\n    return true\n  }\n\n  get average () {\n    if (!this._average) {\n      const { r, g, b } = this.colors.reduce((total, color) => {\n        total.r += color._red\n        total.g += color._green\n        total.b += color._blue\n        return total\n      }, { r: 0, g: 0, b: 0 })\n\n      const total = this.colors.reduce((_count, color) => _count + color._count, 0)\n      this._average = new Color(\n        Math.round(r / this.colors.length),\n        Math.round(g / this.colors.length),\n        Math.round(b / this.colors.length)\n      )\n      this._average._count = total\n    }\n    return this._average\n  } \n}", "import Color from \"../color/Color\";\nimport { AverageGroup } from \"./AverageGroup\";\n\nexport class AverageManager {\n\n  _hue:number\n  _saturation:number\n  _lightness:number\n\n  private _groups: AverageGroup[] = []\n\n  constructor (\n    hue: number,\n    saturation: number,\n    lightness: number\n  ) {\n    this._hue = hue\n    this._saturation = saturation\n    this._lightness = lightness\n  }\n\n  addColor(color: Color) {\n    const samePalette = this._groups.find(averageGroup => averageGroup.isSamePalette(color, this._hue, this._saturation, this._lightness))\n    if (samePalette) {\n      samePalette.addColor(color)\n    } else {\n      const averageGroup = new AverageGroup()\n      averageGroup.addColor(color)\n      this._groups.push(averageGroup)\n    }\n  }\n\n  getGroups() {\n    return this._groups.map(averageGroup => averageGroup.average)\n  }\n}", "import Color from \"../color/Color\";\nimport { AverageManager } from \"./AverageManager\";\n\nexport default (\n  list: Color[],\n  _pixels: number,\n  _hueDistance: number,\n  _saturationDistance: number,\n  _lightnessDistance: number,\n) => {\n  const averageManager = new AverageManager(_hueDistance, _saturationDistance, _lightnessDistance)\n  list.forEach(color => averageManager.addColor(color))\n\n  const sorted = averageManager.getGroups()\n\n  sorted.sort((a, b) => {\n    const bPower = (b._intensity + 0.1) * (0.9 - b._count / _pixels)\n    const aPower = (a._intensity + 0.1) * (0.9 - a._count / _pixels)\n    return bPower - aPower \n  })\n  return sorted\n} \n", "import { FinalColor } from \"../types/Color\";\nimport Color from \"./Color\";\n\n/**\n * Normalize color\n * \n * @param color Initial color\n * @param pixels Pixel count of this color\n * \n * @returns Normalized color\n */\nexport const createFinalColor = (color: Color, pixels: number): FinalColor => {\n  return {\n    hex: `#${'0'.repeat(6 - color._hex.toString(16).length)}${color._hex.toString(16)}`,\n    red: color._red,\n    green: color._green,\n    blue: color._blue,\n    area: color._count / pixels,\n    hue: color._hue,\n    saturation: color._saturation,\n    lightness: color._lightness,\n    intensity: color._intensity,\n  }\n}", "import { BrowserOptions } from \"../types/Options\"\n\n/**\n * Default extractor values\n */\nexport const enum EXTRACTOR_DEFAULT {\n  PIXELS = 64000,\n  DISTANCE = 0.22\n}\n\n/**\n * Default average values\n */\nexport const enum AVERAGE_DEFAULT {\n  HUE = 1/12,\n  SATURATION = 1/5,\n  LIGHTNESS = 1/5,\n}\n\nexport default ({\n  pixels = EXTRACTOR_DEFAULT.PIXELS,\n  distance = EXTRACTOR_DEFAULT.DISTANCE,\n  colorValidator = (_red: number, _green: number, _blue: number, _alpha?: number) => (_alpha ?? 255) > 250,\n  hueDistance = AVERAGE_DEFAULT.HUE,\n  saturationDistance = AVERAGE_DEFAULT.LIGHTNESS,\n  lightnessDistance = AVERAGE_DEFAULT.SATURATION,\n  crossOrigin = null\n}:BrowserOptions = {}): [\n  number,\n  number,\n  (red: number, green: number, blue: number, alpha: number) => boolean,\n  number,\n  number,\n  number,\n  \"\" | \"anonymous\" | \"use-credentials\" | null,\n] => {\n  if (__DEV__) {\n\n    /**\n     * Test if value is an integer.\n     */\n    const testUint = (label: string, val: number, min = 0, max = Number.MAX_SAFE_INTEGER) => {\n      if (!Number.isInteger(val)) {\n        throw new Error(`${label} is not a valid number (${ val })`)\n      }\n\n      if (val < min) {\n        console.warn(`${label} can not be less than ${min} (it's ${val})`)\n      }\n\n      if (val > max) {\n        console.warn(`${label} can not be more than ${max} (it's ${val})`)\n      }\n\n      return Math.min(Math.max(val, min), max)\n    }\n\n    /**\n     * Test if value is a number.\n     */\n    const testNumber = (label: string, val: number, min = 0, max = Number.MAX_VALUE) => {\n      if (Number(val) !== val) {\n        throw new Error(`${label} is not a valid number (${ val })`)\n      }\n\n      if (val < min) {\n        console.warn(`${label} can not be less than ${min} (it's ${val})`)\n      }\n\n      if (val > max) {\n        console.warn(`${label} can not be more than ${max} (it's ${val})`)\n      }\n\n      return Math.min(Math.max(val, min), max)\n    }\n\n    /**\n     * Test if value is a function.\n     */\n    const testFunction = <T = () => void>(label: string, val: T) => {\n      if (!val || {}.toString.call(val) !== '[object Function]') {\n        throw new Error(`${label} is not a function (${ val })`)\n      }\n\n      return val\n    }\n\n    testUint('pixels', pixels || 0, 1)\n    testNumber('distance', distance, 0, 1)\n    testFunction('colorValidator', colorValidator)\n    testNumber('hueDistance', hueDistance, 0, 1)\n    testNumber('saturationDistance', saturationDistance, 0, 1)\n    testNumber('lightnessDistance', lightnessDistance, 0, 1)\n  }\n\n  return [\n    Math.max(pixels, 1),\n    Math.min(Math.max(distance, 0), 1),\n    colorValidator,\n    Math.min(Math.max(hueDistance, 0), 1),\n    Math.min(Math.max(saturationDistance, 0), 1),\n    Math.min(Math.max(lightnessDistance, 0), 1),\n    crossOrigin\n  ] \n}\n", "import Color from './Color'\n\n/**\n * Manage list of colors to optimize and merge neighbors colors.\n *\n * @export\n * @class LeafGroup\n */\nexport default class LeafGroup {\n\n  _count: number\n  _children: { [key: number]: Color }\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 0\n    this._children = { }\n  }\n\n  /**\n   * Add color to the group.\n   * \n   * @param _hex Hexadecimal value of the color\n   * @param _red Red chanel amount of the color\n   * @param _green Green chanel amount of the color\n   * @param _blue Blue chanel amount of the color\n   * @returns The color\n   */\n  addColor (_hex: number, _red: number, _green: number, _blue: number) {\n    this._count++\n    if (this._children[_hex]) {\n      this._children[_hex]._count++\n    } else {\n      this._children[_hex] = new Color(_red, _green, _blue, _hex)\n    }\n    return this._children[_hex]\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   * \n   * @returns List of colors\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  /**\n   * Representative color of leaf.\n   * \n   * @returns Main color of the leaf\n   */\n  createMainColor () {\n    const list = this.getList()\n    const biggest = list.reduce((a, b) => a._count >= b._count ? a : b)\n    const main = biggest.clone()\n    main._count = this._count\n    return main\n  }\n}\n", "import Color from './Color'\nimport LeafGroup from './LeafGroup'\n\n/**\n * RootGroup colors with algorithms to optimize and merge neighbors colors.\n * \n * @class\n * @classdesc Manage list of colors or groups.\n */\nexport default class RootGroup {\n  _count: number\n  _children: { [key: number]: LeafGroup }\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 0\n    this._children = { }\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  addColor(r: number, g: number, b: number) {\n    const full = r << 16 | g << 8 | b\n    const loss = (r >> 4 & 0xF) << 8 | (g >> 4 & 0xF) << 4 | (b >> 4 & 0xF)\n    this._count++\n    return this.getLeafGroup(loss).addColor(full, r, g, b)\n  }\n\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   */\n  getLeafGroup (key: number) {\n    if (!this._children[key]) {\n      this._children[key] = new LeafGroup()\n    }\n    return this._children[key] as LeafGroup\n  }\n\n  /**\n   * List of colors sorted by importance (neighboring hare calculated by distance and removed).\n   * Importance is calculated with the saturation and _count of neighboring colors.\n   */\n  getColors (_distance: number) {\n    const list = this.getList()\n      .map((child) => child.createMainColor())\n\n    list.sort((a, b) => b._count - a._count)\n\n    const newList: Color[] = []\n    while (list.length) {\n      const current = list.shift() as Color\n      list\n        .filter((color) => Color.distance(current, color) < _distance)\n        .forEach(near => {\n          current._count += near._count\n          const i = list.findIndex(color => color === near) \n          list.splice(i, 1)\n        })\n      \n      newList.push(current)\n    }\n\n    return newList\n  }\n}\n", "import RootGroup from '../color/RootGroup'\n\n/**\n * Run extract process and get list of colors.\n */\nexport default (\n  { data, width, height }: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number },\n  _pixels: number,\n  _distance: number,\n  _colorValidator: (red: number, green: number, blue: number, alpha: number) => boolean\n) => {\n  const colorGroup = new RootGroup()\n  const reducer = (width && height) ? Math.floor(width * height / _pixels) || 1 : 1\n  let ignoredColorsCount = 0\n\n  for (let i = 0; i < data.length; i += 4 * reducer) {\n    const r = data[i] // 0 -> 255\n    const g = data[i + 1]\n    const b = data[i + 2]\n    const a = data[i + 3]\n\n    if (_colorValidator(r, g, b, a)) {\n      colorGroup.addColor(r, g, b)\n    } else {\n      ignoredColorsCount++\n    }\n  }\n  \n  return {\n    colors: colorGroup.getColors(_distance),\n    count: colorGroup._count + ignoredColorsCount\n  }\n}\n", "import Color from \"./color/Color\"\nimport sortColors from \"./sort/sortColors\"\nimport { createFinalColor } from \"./color/FinalColor\"\nimport { BrowserOptions, NodeOptions } from \"./types/Options\"\nimport cleanInputs from \"./extract/cleanInputs\"\nimport extractor from \"./extract/extractor\"\nimport { FinalColor } from './types/Color'\n\ntype ImageDataAlt = { data: Uint8ClampedArray | number[], width?: number, height?: number }\n\n/**\n * Browser or Node.js context detection\n * \n * @returns Is a browser context\n */\nconst _isBrowser = () => typeof window !== 'undefined'\n\n/**\n * Sort colors and generate standard list of colors.\n * \n * @param _colors List of colors\n * @param _pixels Count of pixels in the image\n * @param _hueDistance Maximal HUE distance between pixel before pixel merging\n * @param _saturationDistance Maximal saturation distance between pixel before pixel merging\n * @param _lightnessDistance Maximal lightness distance between pixel before pixel merging\n * @returns Sorted colors list\n */\nconst _sortFinalColors = (_colors: Color[], _pixels: number, _hueDistance: number, _saturationDistance: number, _lightnessDistance: number) => {\n  const list = sortColors(_colors, _pixels, _hueDistance, _saturationDistance, _lightnessDistance)\n  return list.map(color => createFinalColor(color, _pixels))\n}\n\n/**\n * Extract ImageData from image.\n * Reduce image to a pixel count.\n * Browser only\n * \n * @param _image HTML image element\n * @param _pixels Count of maximum pixels accepted for the calculation\n * @returns Data of the reduced image\n */\nconst _getImageData = (_image: HTMLImageElement, _pixels: number) => {\n  const currentPixels = _image.width * _image.height\n  const width = currentPixels < _pixels ? _image.width : Math.round(_image.width * Math.sqrt(_pixels / currentPixels))\n  const height = currentPixels < _pixels ? _image.height : Math.round(_image.height * Math.sqrt(_pixels / currentPixels))\n\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n\n  const context = canvas.getContext('2d') as CanvasRenderingContext2D\n  context.drawImage(_image, 0, 0, _image.width, _image.height, 0, 0, width, height)\n\n  return context.getImageData(0, 0, width, height)\n}\n\n/**\n * Extract colors from an ImageData object.\n * \n * @param imageData Data of the image\n * @param options Process configuration\n * @param options.pixels The name of the user.\n * @param options.distance The email of the user.\n * @param options.colorValidator Test function to enable only some colors\n * @param options.saturationDistance Minimum saturation value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.lightnessDistance inimum lightness value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.hueDistance inimum hue value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.crossOrigin support for CORS (only for browser)\n * \n * @returns List of extracted colors\n */\nexport const extractColorsFromImageData = (imageData: ImageData | ImageDataAlt, options: NodeOptions | BrowserOptions = {}) => {\n  const [_pixels, _distance, _colorValidator, _hueDistance, _saturationDistance, _lightnessDistance] = cleanInputs(options)\n  const { colors, count } = extractor(imageData, _pixels, _distance, _colorValidator)\n  return _sortFinalColors(colors, count, _hueDistance, _saturationDistance, _lightnessDistance)\n}\n\n/**\n * Extract colors from an HTMLImageElement.\n * Browser only\n * \n * @param image HTML image element\n * @param options Process configuration\n * @param options.pixels The name of the user.\n * @param options.distance The email of the user.\n * @param options.colorValidator Test function to enable only some colors\n * @param options.saturationDistance Minimum saturation value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.lightnessDistance inimum lightness value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.hueDistance inimum hue value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.crossOrigin support for CORS (only for browser)\n * \n * @returns List of extracted colors\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore \nexport const extractColorsFromImage = (image: HTMLImageElement, options: BrowserOptions = {}): Promise<FinalColor[]> => {\n\n  // Browser version\n  if (_isBrowser()) {\n    const [_pixels, _distance, _colorValidator, _hueDistance, _saturationDistance, _lightnessDistance, _crossOrigin] = cleanInputs(options)\n    image.crossOrigin = _crossOrigin\n    return new Promise((resolve: (value: FinalColor[]) => void) => {\n      const extract = (image: HTMLImageElement) => {\n        const imageData = _getImageData(image, _pixels)\n        const { colors, count } = extractor(imageData, _pixels, _distance, _colorValidator)\n        resolve(_sortFinalColors(colors, count, _hueDistance, _saturationDistance, _lightnessDistance))\n      }\n  \n      if (image.complete) {\n        extract(image)\n      } else {\n        const imageLoaded = () => {\n          image.removeEventListener('load', imageLoaded)\n          extract(image)\n        }\n        image.addEventListener('load', imageLoaded)\n      }\n    })\n\n  // Node.js version\n  } else {\n    if (__DEV__) {\n      throw new Error('Can not use extractColorsFromImage for Node.js')\n    }\n  }\n}\n\n/**\n * Extract colors from a path.\n * The image will be downloaded.\n * \n * @param src Image source\n * @param options Process configuration\n * @param options.pixels The name of the user.\n * @param options.distance The email of the user.\n * @param options.colorValidator Test function to enable only some colors\n * @param options.saturationDistance Minimum saturation value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.lightnessDistance inimum lightness value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.hueDistance inimum hue value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.crossOrigin support for CORS (only for browser)\n * \n * @returns List of extracted colors\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore \nexport const extractColorsFromSrc = (src: string, options: BrowserOptions = {}): Promise<FinalColor[]> => {\n  \n  // Browser version\n  if (_isBrowser()) {\n    const image = new Image()\n    image.src = src\n    return extractColorsFromImage(image, options)\n\n\n  // Node.js version\n  } else {\n    if (__DEV__) {\n      throw new Error('Can not use extractColorsFromSrc for Node.js')\n    }\n  }\n}\n\n/**\n * Extract colors from a picture.\n * \n * @param picture Image, image source or image data (node.js context only support image data)\n * @param options Process configuration\n * @param options.pixels The name of the user.\n * @param options.distance The email of the user.\n * @param options.colorValidator Test function to enable only some colors\n * @param options.saturationDistance Minimum saturation value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.lightnessDistance inimum lightness value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.hueDistance inimum hue value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.crossOrigin support for CORS (only for browser)\n * \n * @returns List of extracted colors\n */\nexport const extractColors = (picture: string | HTMLImageElement | ImageData | ImageDataAlt, options?: BrowserOptions) => {\n\n  // Browser version\n  if (_isBrowser()) {\n    if (picture instanceof Image) {\n      return extractColorsFromImage(picture, options)\n    }\n  \n    if (picture instanceof ImageData || (picture instanceof Object && picture.data)) {\n      return new Promise((resolve: (value: FinalColor[]) => void) => {\n        resolve(extractColorsFromImageData(picture, options))\n      })\n    }\n  \n    if (typeof picture === \"string\") {\n      return extractColorsFromSrc(picture, options)\n    }\n  \n  // Node.js version\n  } else {\n    if (__DEV__) {\n\n      if (picture instanceof String ) {\n        throw new Error('Send imageData to extractColors (Image src or HTMLImageElement not supported in Nodejs)')\n      }\n\n      if (!(picture as ImageData).data) {\n        throw new Error('Send imageData to extractColors')\n      }\n\n      if (options?.crossOrigin) {\n        console.warn('options.crossOrigin not supported in Node.js')\n      }\n    }\n    \n    return new Promise((resolve: (value: FinalColor[]) => void) => {\n      resolve(extractColorsFromImageData(picture as ImageData | ImageDataAlt, options))\n    })\n  }\n\n  throw new Error(`Can not analyse picture`)\n}\n"],
  "mappings": "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",
  "names": ["distance", "total", "hueDistance", "image"]
}

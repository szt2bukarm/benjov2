{"version":3,"file":"extract-colors.cjs","sources":["../src/color/Color.ts","../src/sort/AverageGroup.ts","../src/sort/AverageManager.ts","../src/sort/sortColors.ts","../src/extract/cleanInputs.ts","../src/color/LeafGroup.ts","../src/color/RootGroup.ts","../src/extract/extractor.ts","../src/extractColors.ts","../src/color/FinalColor.ts"],"sourcesContent":["/**\n * Informations like saturation or count of pixels in image.\n * \n * @class\n * @classdesc Calculate some informations and store data about color.\n */\nexport default class Color {\n  \n  _red: number\n  _green: number\n  _blue: number\n  _hex: number\n  _count = 1\n\n  private __saturation = -1\n  private __hue = -1\n  private __lightness = -1\n  private __intensity = -1\n\n  /**\n   * Set red, green and blue colors to create the Color object.\n   */\n  constructor (red: number, green: number, blue: number, hex = red << 16 | green << 8 | blue) {\n    this._red = red\n    this._green = green\n    this._blue = blue\n    this._hex = hex\n  }\n\n  /**\n   * Distance between two colors.\n   * - Minimum is 0 (between two same colors)\n   * - Maximum is 1 (for example between black and white)\n   */\n  static distance (colorA: Color, colorB: Color) {\n    return (Math.abs(colorB._red - colorA._red) + Math.abs(colorB._green - colorA._green) + Math.abs(colorB._blue - colorA._blue)) / (3 * 0xFF)\n  }\n\n  clone() {\n    const color = new Color(this._red, this._green, this._blue, this._hex)\n    color._count = this._count\n    return color\n  }\n\n  updateHSL () {\n    const red = this._red / 255\n    const green = this._green / 255\n    const blue = this._blue / 255\n\n    const max = Math.max(red, green, blue)\n    const min = Math.min(red, green, blue)\n\n    this.__lightness = (max + min) / 2\n\n    // achromatic\n    if (max === min) {\n      this.__hue = 0\n      this.__saturation = 0\n      this.__intensity = 0\n    } else {\n      const distance = max - min;\n      \n      this.__saturation = this.__lightness > 0.5 ? distance / (2 - max - min) : distance / (max + min)\n      this.__intensity = this.__saturation * ((0.5 - Math.abs(0.5 - this.__lightness)) * 2)\n      switch (max) {\n        case red:\n          this.__hue = ((green - blue) / distance + (green < blue ? 6 : 0)) / 6\n          break;\n        case green:\n          this.__hue = ((blue - red) / distance + 2) / 6\n          break;\n        case blue:\n          this.__hue = ((red - green) / distance + 4) / 6\n          break;\n      }\n    }\n  }\n\n  /**\n   * Hue from 0 to 1\n   */\n  get _hue () {\n    if (this.__hue === -1) {\n      this.updateHSL()\n    }\n    return this.__hue\n  }\n\n  /**\n   * Saturation from 0 to 1\n   */\n  get _saturation () {\n    if (this.__saturation === -1) {\n      this.updateHSL()\n    }\n    return this.__saturation\n  }\n\n  /**\n   * Lightness from 0 to 1\n   */\n  get _lightness () {\n    if (this.__lightness === -1) {\n      this.updateHSL()\n    }\n    return this.__lightness\n  }\n  \n  /**\n   * Color intensity from 0 to 1\n   */\n  get _intensity () {\n    if (this.__intensity === -1) {\n      this.updateHSL()\n    }\n    return this.__intensity\n  }\n}\n","import Color from \"../color/Color\";\n\nconst distance = (a: number, b: number) => Math.abs(a - b)\nconst hueDistance = (a: number, b: number) =>\n  Math.min(distance(a, b), distance((a + 0.5) % 1, (b + 0.5) % 1))\n\nexport class AverageGroup {\n  colors: Color[] = []\n  private _average: Color | null = null\n\n  addColor(color: Color) {\n    this.colors.push(color)\n    this._average = null\n  }\n\n  isSamePalette(color: Color, hue: number, saturation: number, lightness: number) {\n    for (let i = 0; i < this.colors.length; i++) {\n      const currentColor = this.colors[i]\n      const isSame = \n        hueDistance(currentColor._hue, color._hue) < hue &&\n        distance(currentColor._saturation, color._saturation) < saturation &&\n        distance(currentColor._lightness, color._lightness) < lightness\n\n      if (!isSame) {\n        return false\n      }\n    }\n    return true\n  }\n\n  get average () {\n    if (!this._average) {\n      const { r, g, b } = this.colors.reduce((total, color) => {\n        total.r += color._red\n        total.g += color._green\n        total.b += color._blue\n        return total\n      }, { r: 0, g: 0, b: 0 })\n\n      const total = this.colors.reduce((_count, color) => _count + color._count, 0)\n      this._average = new Color(\n        Math.round(r / this.colors.length),\n        Math.round(g / this.colors.length),\n        Math.round(b / this.colors.length)\n      )\n      this._average._count = total\n    }\n    return this._average\n  } \n}","import Color from \"../color/Color\";\nimport { AverageGroup } from \"./AverageGroup\";\n\nexport class AverageManager {\n\n  _hue:number\n  _saturation:number\n  _lightness:number\n\n  private _groups: AverageGroup[] = []\n\n  constructor (\n    hue: number,\n    saturation: number,\n    lightness: number\n  ) {\n    this._hue = hue\n    this._saturation = saturation\n    this._lightness = lightness\n  }\n\n  addColor(color: Color) {\n    const samePalette = this._groups.find(averageGroup => averageGroup.isSamePalette(color, this._hue, this._saturation, this._lightness))\n    if (samePalette) {\n      samePalette.addColor(color)\n    } else {\n      const averageGroup = new AverageGroup()\n      averageGroup.addColor(color)\n      this._groups.push(averageGroup)\n    }\n  }\n\n  getGroups() {\n    return this._groups.map(averageGroup => averageGroup.average)\n  }\n}","import Color from \"../color/Color\";\nimport { AverageManager } from \"./AverageManager\";\n\nexport default (\n  list: Color[],\n  _pixels: number,\n  _hueDistance: number,\n  _saturationDistance: number,\n  _lightnessDistance: number,\n) => {\n  const averageManager = new AverageManager(_hueDistance, _saturationDistance, _lightnessDistance)\n  list.forEach(color => averageManager.addColor(color))\n\n  const sorted = averageManager.getGroups()\n\n  sorted.sort((a, b) => {\n    const bPower = (b._intensity + 0.1) * (0.9 - b._count / _pixels)\n    const aPower = (a._intensity + 0.1) * (0.9 - a._count / _pixels)\n    return bPower - aPower \n  })\n  return sorted\n} \n","import { BrowserOptions } from \"../types/Options\"\n\n/**\n * Default extractor values\n */\nexport const enum EXTRACTOR_DEFAULT {\n  PIXELS = 64000,\n  DISTANCE = 0.22\n}\n\n/**\n * Default average values\n */\nexport const enum AVERAGE_DEFAULT {\n  HUE = 1/12,\n  SATURATION = 1/5,\n  LIGHTNESS = 1/5,\n}\n\nexport default ({\n  pixels = EXTRACTOR_DEFAULT.PIXELS,\n  distance = EXTRACTOR_DEFAULT.DISTANCE,\n  colorValidator = (_red: number, _green: number, _blue: number, _alpha?: number) => (_alpha ?? 255) > 250,\n  hueDistance = AVERAGE_DEFAULT.HUE,\n  saturationDistance = AVERAGE_DEFAULT.LIGHTNESS,\n  lightnessDistance = AVERAGE_DEFAULT.SATURATION,\n  crossOrigin = null\n}:BrowserOptions = {}): [\n  number,\n  number,\n  (red: number, green: number, blue: number, alpha: number) => boolean,\n  number,\n  number,\n  number,\n  \"\" | \"anonymous\" | \"use-credentials\" | null,\n] => {\n  if (__DEV__) {\n\n    /**\n     * Test if value is an integer.\n     */\n    const testUint = (label: string, val: number, min = 0, max = Number.MAX_SAFE_INTEGER) => {\n      if (!Number.isInteger(val)) {\n        throw new Error(`${label} is not a valid number (${ val })`)\n      }\n\n      if (val < min) {\n        console.warn(`${label} can not be less than ${min} (it's ${val})`)\n      }\n\n      if (val > max) {\n        console.warn(`${label} can not be more than ${max} (it's ${val})`)\n      }\n\n      return Math.min(Math.max(val, min), max)\n    }\n\n    /**\n     * Test if value is a number.\n     */\n    const testNumber = (label: string, val: number, min = 0, max = Number.MAX_VALUE) => {\n      if (Number(val) !== val) {\n        throw new Error(`${label} is not a valid number (${ val })`)\n      }\n\n      if (val < min) {\n        console.warn(`${label} can not be less than ${min} (it's ${val})`)\n      }\n\n      if (val > max) {\n        console.warn(`${label} can not be more than ${max} (it's ${val})`)\n      }\n\n      return Math.min(Math.max(val, min), max)\n    }\n\n    /**\n     * Test if value is a function.\n     */\n    const testFunction = <T = () => void>(label: string, val: T) => {\n      if (!val || {}.toString.call(val) !== '[object Function]') {\n        throw new Error(`${label} is not a function (${ val })`)\n      }\n\n      return val\n    }\n\n    testUint('pixels', pixels || 0, 1)\n    testNumber('distance', distance, 0, 1)\n    testFunction('colorValidator', colorValidator)\n    testNumber('hueDistance', hueDistance, 0, 1)\n    testNumber('saturationDistance', saturationDistance, 0, 1)\n    testNumber('lightnessDistance', lightnessDistance, 0, 1)\n  }\n\n  return [\n    Math.max(pixels, 1),\n    Math.min(Math.max(distance, 0), 1),\n    colorValidator,\n    Math.min(Math.max(hueDistance, 0), 1),\n    Math.min(Math.max(saturationDistance, 0), 1),\n    Math.min(Math.max(lightnessDistance, 0), 1),\n    crossOrigin\n  ] \n}\n","import Color from './Color'\n\n/**\n * Manage list of colors to optimize and merge neighbors colors.\n *\n * @export\n * @class LeafGroup\n */\nexport default class LeafGroup {\n\n  _count: number\n  _children: { [key: number]: Color }\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 0\n    this._children = { }\n  }\n\n  /**\n   * Add color to the group.\n   * \n   * @param _hex Hexadecimal value of the color\n   * @param _red Red chanel amount of the color\n   * @param _green Green chanel amount of the color\n   * @param _blue Blue chanel amount of the color\n   * @returns The color\n   */\n  addColor (_hex: number, _red: number, _green: number, _blue: number) {\n    this._count++\n    if (this._children[_hex]) {\n      this._children[_hex]._count++\n    } else {\n      this._children[_hex] = new Color(_red, _green, _blue, _hex)\n    }\n    return this._children[_hex]\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   * \n   * @returns List of colors\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  /**\n   * Representative color of leaf.\n   * \n   * @returns Main color of the leaf\n   */\n  createMainColor () {\n    const list = this.getList()\n    const biggest = list.reduce((a, b) => a._count >= b._count ? a : b)\n    const main = biggest.clone()\n    main._count = this._count\n    return main\n  }\n}\n","import Color from './Color'\nimport LeafGroup from './LeafGroup'\n\n/**\n * RootGroup colors with algorithms to optimize and merge neighbors colors.\n * \n * @class\n * @classdesc Manage list of colors or groups.\n */\nexport default class RootGroup {\n  _count: number\n  _children: { [key: number]: LeafGroup }\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 0\n    this._children = { }\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  addColor(r: number, g: number, b: number) {\n    const full = r << 16 | g << 8 | b\n    const loss = (r >> 4 & 0xF) << 8 | (g >> 4 & 0xF) << 4 | (b >> 4 & 0xF)\n    this._count++\n    return this.getLeafGroup(loss).addColor(full, r, g, b)\n  }\n\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   */\n  getLeafGroup (key: number) {\n    if (!this._children[key]) {\n      this._children[key] = new LeafGroup()\n    }\n    return this._children[key] as LeafGroup\n  }\n\n  /**\n   * List of colors sorted by importance (neighboring hare calculated by distance and removed).\n   * Importance is calculated with the saturation and _count of neighboring colors.\n   */\n  getColors (_distance: number) {\n    const list = this.getList()\n      .map((child) => child.createMainColor())\n\n    list.sort((a, b) => b._count - a._count)\n\n    const newList: Color[] = []\n    while (list.length) {\n      const current = list.shift() as Color\n      list\n        .filter((color) => Color.distance(current, color) < _distance)\n        .forEach(near => {\n          current._count += near._count\n          const i = list.findIndex(color => color === near) \n          list.splice(i, 1)\n        })\n      \n      newList.push(current)\n    }\n\n    return newList\n  }\n}\n","import RootGroup from '../color/RootGroup'\n\n/**\n * Run extract process and get list of colors.\n */\nexport default (\n  { data, width, height }: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number },\n  _pixels: number,\n  _distance: number,\n  _colorValidator: (red: number, green: number, blue: number, alpha: number) => boolean\n) => {\n  const colorGroup = new RootGroup()\n  const reducer = (width && height) ? Math.floor(width * height / _pixels) || 1 : 1\n  let ignoredColorsCount = 0\n\n  for (let i = 0; i < data.length; i += 4 * reducer) {\n    const r = data[i] // 0 -> 255\n    const g = data[i + 1]\n    const b = data[i + 2]\n    const a = data[i + 3]\n\n    if (_colorValidator(r, g, b, a)) {\n      colorGroup.addColor(r, g, b)\n    } else {\n      ignoredColorsCount++\n    }\n  }\n  \n  return {\n    colors: colorGroup.getColors(_distance),\n    count: colorGroup._count + ignoredColorsCount\n  }\n}\n","import Color from \"./color/Color\"\nimport sortColors from \"./sort/sortColors\"\nimport { createFinalColor } from \"./color/FinalColor\"\nimport { BrowserOptions, NodeOptions } from \"./types/Options\"\nimport cleanInputs from \"./extract/cleanInputs\"\nimport extractor from \"./extract/extractor\"\nimport { FinalColor } from './types/Color'\n\ntype ImageDataAlt = { data: Uint8ClampedArray | number[], width?: number, height?: number }\n\n/**\n * Browser or Node.js context detection\n * \n * @returns Is a browser context\n */\nconst _isBrowser = () => typeof window !== 'undefined'\n\n/**\n * Sort colors and generate standard list of colors.\n * \n * @param _colors List of colors\n * @param _pixels Count of pixels in the image\n * @param _hueDistance Maximal HUE distance between pixel before pixel merging\n * @param _saturationDistance Maximal saturation distance between pixel before pixel merging\n * @param _lightnessDistance Maximal lightness distance between pixel before pixel merging\n * @returns Sorted colors list\n */\nconst _sortFinalColors = (_colors: Color[], _pixels: number, _hueDistance: number, _saturationDistance: number, _lightnessDistance: number) => {\n  const list = sortColors(_colors, _pixels, _hueDistance, _saturationDistance, _lightnessDistance)\n  return list.map(color => createFinalColor(color, _pixels))\n}\n\n/**\n * Extract ImageData from image.\n * Reduce image to a pixel count.\n * Browser only\n * \n * @param _image HTML image element\n * @param _pixels Count of maximum pixels accepted for the calculation\n * @returns Data of the reduced image\n */\nconst _getImageData = (_image: HTMLImageElement, _pixels: number) => {\n  const currentPixels = _image.width * _image.height\n  const width = currentPixels < _pixels ? _image.width : Math.round(_image.width * Math.sqrt(_pixels / currentPixels))\n  const height = currentPixels < _pixels ? _image.height : Math.round(_image.height * Math.sqrt(_pixels / currentPixels))\n\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n\n  const context = canvas.getContext('2d') as CanvasRenderingContext2D\n  context.drawImage(_image, 0, 0, _image.width, _image.height, 0, 0, width, height)\n\n  return context.getImageData(0, 0, width, height)\n}\n\n/**\n * Extract colors from an ImageData object.\n * \n * @param imageData Data of the image\n * @param options Process configuration\n * @param options.pixels The name of the user.\n * @param options.distance The email of the user.\n * @param options.colorValidator Test function to enable only some colors\n * @param options.saturationDistance Minimum saturation value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.lightnessDistance inimum lightness value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.hueDistance inimum hue value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.crossOrigin support for CORS (only for browser)\n * \n * @returns List of extracted colors\n */\nexport const extractColorsFromImageData = (imageData: ImageData | ImageDataAlt, options: NodeOptions | BrowserOptions = {}) => {\n  const [_pixels, _distance, _colorValidator, _hueDistance, _saturationDistance, _lightnessDistance] = cleanInputs(options)\n  const { colors, count } = extractor(imageData, _pixels, _distance, _colorValidator)\n  return _sortFinalColors(colors, count, _hueDistance, _saturationDistance, _lightnessDistance)\n}\n\n/**\n * Extract colors from an HTMLImageElement.\n * Browser only\n * \n * @param image HTML image element\n * @param options Process configuration\n * @param options.pixels The name of the user.\n * @param options.distance The email of the user.\n * @param options.colorValidator Test function to enable only some colors\n * @param options.saturationDistance Minimum saturation value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.lightnessDistance inimum lightness value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.hueDistance inimum hue value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.crossOrigin support for CORS (only for browser)\n * \n * @returns List of extracted colors\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore \nexport const extractColorsFromImage = (image: HTMLImageElement, options: BrowserOptions = {}): Promise<FinalColor[]> => {\n\n  // Browser version\n  if (_isBrowser()) {\n    const [_pixels, _distance, _colorValidator, _hueDistance, _saturationDistance, _lightnessDistance, _crossOrigin] = cleanInputs(options)\n    image.crossOrigin = _crossOrigin\n    return new Promise((resolve: (value: FinalColor[]) => void) => {\n      const extract = (image: HTMLImageElement) => {\n        const imageData = _getImageData(image, _pixels)\n        const { colors, count } = extractor(imageData, _pixels, _distance, _colorValidator)\n        resolve(_sortFinalColors(colors, count, _hueDistance, _saturationDistance, _lightnessDistance))\n      }\n  \n      if (image.complete) {\n        extract(image)\n      } else {\n        const imageLoaded = () => {\n          image.removeEventListener('load', imageLoaded)\n          extract(image)\n        }\n        image.addEventListener('load', imageLoaded)\n      }\n    })\n\n  // Node.js version\n  } else {\n    if (__DEV__) {\n      throw new Error('Can not use extractColorsFromImage for Node.js')\n    }\n  }\n}\n\n/**\n * Extract colors from a path.\n * The image will be downloaded.\n * \n * @param src Image source\n * @param options Process configuration\n * @param options.pixels The name of the user.\n * @param options.distance The email of the user.\n * @param options.colorValidator Test function to enable only some colors\n * @param options.saturationDistance Minimum saturation value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.lightnessDistance inimum lightness value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.hueDistance inimum hue value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.crossOrigin support for CORS (only for browser)\n * \n * @returns List of extracted colors\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore \nexport const extractColorsFromSrc = (src: string, options: BrowserOptions = {}): Promise<FinalColor[]> => {\n  \n  // Browser version\n  if (_isBrowser()) {\n    const image = new Image()\n    image.src = src\n    return extractColorsFromImage(image, options)\n\n\n  // Node.js version\n  } else {\n    if (__DEV__) {\n      throw new Error('Can not use extractColorsFromSrc for Node.js')\n    }\n  }\n}\n\n/**\n * Extract colors from a picture.\n * \n * @param picture Image, image source or image data (node.js context only support image data)\n * @param options Process configuration\n * @param options.pixels The name of the user.\n * @param options.distance The email of the user.\n * @param options.colorValidator Test function to enable only some colors\n * @param options.saturationDistance Minimum saturation value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.lightnessDistance inimum lightness value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.hueDistance inimum hue value between two colors otherwise the colors will be merged (from 0 to 1)\n * @param options.crossOrigin support for CORS (only for browser)\n * \n * @returns List of extracted colors\n */\nexport const extractColors = (picture: string | HTMLImageElement | ImageData | ImageDataAlt, options?: BrowserOptions) => {\n\n  // Browser version\n  if (_isBrowser()) {\n    if (picture instanceof Image) {\n      return extractColorsFromImage(picture, options)\n    }\n  \n    if (picture instanceof ImageData || (picture instanceof Object && picture.data)) {\n      return new Promise((resolve: (value: FinalColor[]) => void) => {\n        resolve(extractColorsFromImageData(picture, options))\n      })\n    }\n  \n    if (typeof picture === \"string\") {\n      return extractColorsFromSrc(picture, options)\n    }\n  \n  // Node.js version\n  } else {\n    if (__DEV__) {\n\n      if (picture instanceof String ) {\n        throw new Error('Send imageData to extractColors (Image src or HTMLImageElement not supported in Nodejs)')\n      }\n\n      if (!(picture as ImageData).data) {\n        throw new Error('Send imageData to extractColors')\n      }\n\n      if (options?.crossOrigin) {\n        console.warn('options.crossOrigin not supported in Node.js')\n      }\n    }\n    \n    return new Promise((resolve: (value: FinalColor[]) => void) => {\n      resolve(extractColorsFromImageData(picture as ImageData | ImageDataAlt, options))\n    })\n  }\n\n  throw new Error(`Can not analyse picture`)\n}\n","import { FinalColor } from \"../types/Color\";\nimport Color from \"./Color\";\n\n/**\n * Normalize color\n * \n * @param color Initial color\n * @param pixels Pixel count of this color\n * \n * @returns Normalized color\n */\nexport const createFinalColor = (color: Color, pixels: number): FinalColor => {\n  return {\n    hex: `#${'0'.repeat(6 - color._hex.toString(16).length)}${color._hex.toString(16)}`,\n    red: color._red,\n    green: color._green,\n    blue: color._blue,\n    area: color._count / pixels,\n    hue: color._hue,\n    saturation: color._saturation,\n    lightness: color._lightness,\n    intensity: color._intensity,\n  }\n}"],"names":["Color","constructor","red","green","blue","hex","this","_count","__saturation","__hue","__lightness","__intensity","_red","_green","_blue","_hex","distance","colorA","colorB","Math","abs","clone","color","updateHSL","max","min","_hue","_saturation","_lightness","_intensity","a","b","AverageGroup","colors","_average","addColor","push","isSamePalette","hue","saturation","lightness","i","length","currentColor","average","r","g","reduce","total","round","AverageManager","_groups","samePalette","find","averageGroup","getGroups","map","cleanInputs","pixels","colorValidator","_alpha","hueDistance","saturationDistance","lightnessDistance","crossOrigin","__DEV__","testNumber","label","val","Number","MAX_VALUE","Error","console","warn","testFunction","toString","call","MAX_SAFE_INTEGER","isInteger","testUint","LeafGroup","_children","getList","Object","keys","key","createMainColor","main","RootGroup","full","loss","getLeafGroup","getColors","_distance","list","child","sort","newList","current","shift","filter","forEach","near","findIndex","splice","extractor","data","width","height","_pixels","_colorValidator","colorGroup","reducer","floor","ignoredColorsCount","count","_isBrowser","window","_sortFinalColors","_colors","_hueDistance","_saturationDistance","_lightnessDistance","averageManager","sorted","sortColors","repeat","area","intensity","createFinalColor","extractColorsFromImageData","imageData","options","N","extractColorsFromImage","image","_crossOrigin","Promise","resolve","extract","_image","currentPixels","sqrt","canvas","document","createElement","context","getContext","drawImage","getImageData","_getImageData","complete","imageLoaded","removeEventListener","addEventListener","extractColorsFromSrc","src","Image","picture","String","ImageData"],"mappings":"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"}